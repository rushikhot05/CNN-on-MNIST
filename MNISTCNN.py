# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C31OJIZjebHODlWJAQphCzqSAqv21nQv
"""

#baseline cnn model for mnist
from numpy import mean
from numpy import std
from sklearn.model_selection import KFold
from keras.datasets import mnist
from matplotlib import pyplot
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import BatchNormalization
from keras.optimizers import SGD

#load and train dataset
def load_dataset():
  (trainX, trainY), (testX, testY) = mnist.load_data()
  #reshape dataset to have a single channel
  trainX = trainX.reshape((trainX.shape[0], 28,28,1))
  testX = testX.reshape((testX.shape[0], 28,28,1))
  # one hot encode target values
  trainY = to_categorical(trainY)
  trestY = to_categorical(testY)
  return trainX, trainY, testX, testY

#scale pixel
def prep_pixels(train, test):
  #convert from integers to float
  train_norm = train.astype('float32')
  test_norm = test.astype('float32')
  #normalize to range 0-1
  train_norm = train_norm/255.0
  test_norm = test_norm/255.0
  #return normalized image
  return train_norm, test_norm

#define CNN model
def define_model():
  model = Sequential()
  model.add(Conv2D(32, (3,3), activation='relu', kernel_initializer='he_uniform', input_shape=(28,28,1)))
  model.add(MaxPooling2D((2,2)))
  #model.add(BatchNormalization())
  model.add(Conv2D(64, (3,3), activation='relu', kernel_initializer='he_uniform', input_shape=(28,28,1)))
  model.add(Conv2D(64, (3,3), activation='relu', kernel_initializer='he_uniform', input_shape=(28,28,1)))
  model.add(MaxPooling2D((2,2)))
  model.add(Flatten())
  model.add(Dense(100, activation='relu', kernel_initializer='he_uniform'))
  #model.add(BatchNormalization())
  model.add(Dense(10, activation='softmax'))
  #compile model
  opt = SGD(lr=0.01, momentum=0.9)
  model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])
  return model

#evaluate model using K-Fold validation
def evaluate_model(model, dataX, dataY, n_folds=5):
  scores, histories = list(), list()
  #prepare cross validation
  kfold = KFold(n_folds, shuffle=True, random_state=1)
  #enumerate splits
  for train_ix, test_ix, in kfold.split(dataX):
    #select rows for train and test
    trainX, trainY, testX, testY = dataX[train_ix], dataY[train_ix], dataX[test_ix], dataY[test_ix]
    #fit model
    history = model.fit(trainX, trainY, epochs =10, batch_size=32, validation_data=(testX, testY), verbose=0)
    #evaluate model
    _, acc = model.evaluate(testX, testY, verbose=0)
    print('> %.3f' % (acc*100.0))
    #store scores
    scores.append(acc)
    histories.append(history)
  return scores, histories

def summarize_diagnostics(histories):
  for i in range(len(histories)):
    #plot loss
    pyplot.subplot(211)
    pyplot.title('Cross Entropy Loss')
    pyplot.plot(histories[i].history['loss'], color='blue', label = 'train')
    pyplot.plot(histories[i].history['val_loss'], color='red', label = 'test')
    #plot accuracy
    pyplot.subplot(212)
    pyplot.title('Classification Accuracy')
    pyplot.plot(histories[i].history['acc'], color='blue', label = 'train')
    pyplot.plot(histories[i].history['val_acc'], color='red', label = 'test')
  pyplot.show()

#summarize model performance
def summarize_performance(scores):
  #print summary
  print('Accuracy: mean=%3f std=%.3f, n=%d' % (mean(scores)*100, std(scores)*100, len(scores)))
  #box and whisker plot of results
  pyplot.boxplot(scores)
  pyplot.show()

#run the test harness for evaluating model
def run_test_harness():
  #load dataset
  trainX, trainY, testX, testY = load_dataset()
  #prepare pixel data
  trainX, testX = prep_pixels(trainX, testX)
  #define moedl
  model = define_model()
  #evaluate model
  scores, histories = evaluate_model(model, trainX, trainY)
  #learning curves
  summarize_diagnostics(histories)
  #summarize estimated performance
  summarize_performance(scores)
  #fit model
  model.fit(trainX, trainY, epochs=10, batch_size=32, verbose=0)
  #save model
  model.save('final_model.h5')

run_test_harness()


